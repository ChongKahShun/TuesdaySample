/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication5;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SasaHui
 */
public class DisplayAndRemove extends javax.swing.JFrame {
    public sortedListInterface<Product> productList = new sortedList<>();
    
    
    /**
     * Creates new form DisplayAndRemove
     */

    public DisplayAndRemove() {
        initComponents();
        initializeList();
        for(int i =0;i<productList.size();i++){
            if(productList.get(i).getQuantity() < 10){
            JOptionPane.showMessageDialog(null, "Product Quantity Low, please go check"); 
            }
            if(productList.get(i).getmonth().equals(getMonth())){
                productList.get(i).setDiscount(productList.get(i).getPrice() - 5);
                       //delete File
        File f = new File("ProductCatalog.dat");
        if(f.exists()){
	f.delete();}
        //add to File
         try {
                  ObjectOutputStream ooStream = new ObjectOutputStream(new FileOutputStream("ProductCatalog.dat"));
                  ooStream.writeObject(productList);
                  ooStream.close();
                } catch (FileNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "File not found", "ERROR", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                  JOptionPane.showMessageDialog(null, "Cannot save to file", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
   
    /*public DisplayAndRemove(List<Product> product){
        initComponents();
        initializeList();
        this.productList = product;
       jLabel1.setText("Name                              Price          Quantity                       Description");

    }*/
        public String getMonth(){
        String[] monthName = {"January", "February",
                "March", "April", "May", "June", "July",
                "August", "September", "October", "November",
                "December"};

        Calendar cal = Calendar.getInstance();
        String month = monthName[cal.get(Calendar.MONTH)];
        return month;
    }
    private void initializeList() {
    try {
      ObjectInputStream oiStream = new ObjectInputStream(new FileInputStream("ProductCatalog.dat"));
      productList = (sortedList) (oiStream.readObject());
      oiStream.close();
    } catch (FileNotFoundException ex) {
      JOptionPane.showMessageDialog(null, "File not found", "ERROR", JOptionPane.ERROR_MESSAGE);
    } catch (IOException ex) {
      JOptionPane.showMessageDialog(null, "Cannot read from file", "ERROR", JOptionPane.ERROR_MESSAGE);
    } catch (ClassNotFoundException ex) {
      JOptionPane.showMessageDialog(null, "Class not found", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
  }
    private void fillTable(String type){
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        model.setRowCount(0);
        Object rowData[] = new Object[5];
        for(int i = 0; i < productList.size(); i++)
        {
            if(productList.get(i).getType().equals(type)){
                rowData[0] = productList.get(i).getName();
                rowData[1] = productList.get(i).getPrice();
                rowData[2] = productList.get(i).getQuantity();
                rowData[3] = productList.get(i).getDescription();
                rowData[4] = productList.get(i).getDiscount();
                model.addRow(rowData);    
                jTableProduct.setForeground(Color.black);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonFlower = new javax.swing.JButton();
        jButtonFloral = new javax.swing.JButton();
        jButtonBouquets = new javax.swing.JButton();
        jButtonSeed = new javax.swing.JButton();
        jButtonTool = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jButtonModify = new javax.swing.JButton();
        Stock = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduct = new javax.swing.JTable();
        jButtonInsufficient = new javax.swing.JButton();
        jButtonBack = new javax.swing.JButton();
        jButtonSetPromotion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonFlower.setText("Fresh Flower");
        jButtonFlower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFlowerActionPerformed(evt);
            }
        });

        jButtonFloral.setText("Floral Arrangement");
        jButtonFloral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFloralActionPerformed(evt);
            }
        });

        jButtonBouquets.setText("Bouquets");
        jButtonBouquets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBouquetsActionPerformed(evt);
            }
        });

        jButtonSeed.setText("Seed");
        jButtonSeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeedActionPerformed(evt);
            }
        });

        jButtonTool.setText("Tools");
        jButtonTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonToolActionPerformed(evt);
            }
        });

        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonModify.setText("Modify");
        jButtonModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifyActionPerformed(evt);
            }
        });

        Stock.setText("Add Stock");
        Stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockActionPerformed(evt);
            }
        });

        jTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Original Price", "Quantity", "Description", "Discount Price"
            }
        ));
        jScrollPane1.setViewportView(jTableProduct);

        jButtonInsufficient.setText("Insufficient");
        jButtonInsufficient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsufficientActionPerformed(evt);
            }
        });

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonSetPromotion.setText("Set Promotion");
        jButtonSetPromotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetPromotionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonFloral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonBouquets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonFlower, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonTool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButtonInsufficient, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonModify, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Stock, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSetPromotion))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonFlower)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBouquets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonFloral)
                        .addGap(11, 11, 11)
                        .addComponent(jButtonSeed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonTool)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonInsufficient))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Stock, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonModify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButtonSetPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFlowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFlowerActionPerformed
           fillTable("Flowers");
    }//GEN-LAST:event_jButtonFlowerActionPerformed

    private void jButtonFloralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFloralActionPerformed
        // TODO add your handling code here:
        fillTable("Floral Arrangements");
    }//GEN-LAST:event_jButtonFloralActionPerformed

    private void jButtonBouquetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBouquetsActionPerformed
        // TODO add your handling code here:
        fillTable("Bouquets");
    }//GEN-LAST:event_jButtonBouquetsActionPerformed

    private void jButtonSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeedActionPerformed
        // TODO add your handling code here:
        fillTable("Seeds");
    }//GEN-LAST:event_jButtonSeedActionPerformed

    private void jButtonToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonToolActionPerformed
        // TODO add your handling code here:
        fillTable("Tools");
    }//GEN-LAST:event_jButtonToolActionPerformed
public boolean isEmpty() {
        if(productList.size() == 0){
            return true;
        }
        else
            return false;
    }
    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        try{
             int rowIndex = jTableProduct.getSelectedRow();
        String compareName = model.getValueAt(rowIndex, 0).toString();
       int SelectedRowIndex = jTableProduct.getSelectedRow();
       model.removeRow(SelectedRowIndex);
       for(int i = 0;i<productList.size();i++){
        if(productList.get(i).getName().equals(compareName)){
        productList.remove(i);
        }
        }
        //delete File
        File f = new File("ProductCatalog.dat");
        if(f.exists()){
	f.delete();}
        //add to File
         try {
                  ObjectOutputStream ooStream = new ObjectOutputStream(new FileOutputStream("ProductCatalog.dat"));
                  ooStream.writeObject(productList);
                  ooStream.close();
                } catch (FileNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "File not found", "ERROR", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                  JOptionPane.showMessageDialog(null, "Cannot save to file", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
        JOptionPane.showMessageDialog(null, "Removed Succesful");
       }catch(Exception ex)
       {
           JOptionPane.showMessageDialog(DisplayAndRemove.this, "You must select a row");
       }
        
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifyActionPerformed
            // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        try{
        int rowIndex = jTableProduct.getSelectedRow();
        String compareName = model.getValueAt(rowIndex, 0).toString();
        for(int i = 0;i<productList.size();i++){
        if(productList.get(i).getName().equals(compareName)){
                new addProduct(productList.get(i).getName(),productList.get(i).getType(),productList.get(i).getDescription(),productList.get(i).getmonth(),productList.get(i).getPrice(),productList.get(i).getQuantity(),productList.get(i).getDiscount()).setVisible(true);
            }
        }
        }
        catch(Exception ex)
       {
           JOptionPane.showMessageDialog(DisplayAndRemove.this, "You must select a row");
       }
    }//GEN-LAST:event_jButtonModifyActionPerformed

    private void StockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        try{
        int rowIndex = jTableProduct.getSelectedRow();
        String compareName = model.getValueAt(rowIndex, 0).toString();
        int compareQuantity = Integer.parseInt(model.getValueAt(rowIndex, 2).toString());
        for(int i = 0;i<productList.size();i++){
        if(productList.get(i).getName().equals(compareName) && productList.get(i).getQuantity() == compareQuantity){
        int cQuantity = productList.get(i).getQuantity();
        int add = Integer.parseInt(JOptionPane.showInputDialog("How much did you want to add?"));
        int total = cQuantity + add;
        productList.get(i).setQuantity(total);
        }
        }
               //delete File
        File f = new File("ProductCatalog.dat");
        if(f.exists()){
	f.delete();}
        //add to File
         try {
                  ObjectOutputStream ooStream = new ObjectOutputStream(new FileOutputStream("ProductCatalog.dat"));
                  ooStream.writeObject(productList);
                  ooStream.close();
                } catch (FileNotFoundException ex) {
                  JOptionPane.showMessageDialog(null, "File not found", "ERROR", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                  JOptionPane.showMessageDialog(null, "Cannot save to file", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
        JOptionPane.showMessageDialog(null, "Add Succesful");
        this.dispose();
        new DisplayAndRemove().setVisible(true);
        }catch(Exception ex)
       {
           JOptionPane.showMessageDialog(DisplayAndRemove.this, "You must select a row");
       }
    }//GEN-LAST:event_StockActionPerformed

    private void jButtonInsufficientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsufficientActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) jTableProduct.getModel();
        model.setRowCount(0);
        Object rowData[] = new Object[5];
        for(int i = 0; i < productList.size(); i++)
        {
            if(productList.get(i).getQuantity() < 10){
                rowData[0] = productList.get(i).getName();
                rowData[1] = productList.get(i).getPrice();
                rowData[2] = productList.get(i).getQuantity();
                rowData[3] = productList.get(i).getDescription();
                rowData[4] = productList.get(i).getDiscount();
                model.addRow(rowData);   
                jTableProduct.setForeground(Color.red);
            }
        }
    }//GEN-LAST:event_jButtonInsufficientActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        new addProduct().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonSetPromotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetPromotionActionPerformed
        // TODO add your handling code here:
        new setMonth().setVisible(true);
    }//GEN-LAST:event_jButtonSetPromotionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayAndRemove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayAndRemove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayAndRemove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayAndRemove.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayAndRemove().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Stock;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonBouquets;
    private javax.swing.JButton jButtonFloral;
    private javax.swing.JButton jButtonFlower;
    private javax.swing.JButton jButtonInsufficient;
    private javax.swing.JButton jButtonModify;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonSeed;
    private javax.swing.JButton jButtonSetPromotion;
    private javax.swing.JButton jButtonTool;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableProduct;
    // End of variables declaration//GEN-END:variables

    
}
